<?php

namespace CourBundle\Controller;

use CourBundle\Entity\cours;
use CourBundle\Form\coursType;
use Endroid\QrCode\Factory\QrCodeFactory;
use Swift_Mailer;
use Swift_Message;
use Swift_SmtpTransport;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\HttpFoundation\Request;
use Endroid\QrCode\QrCode;
use Endroid\QrCode\Response\QrCodeResponse;
use Symfony\Component\Serializer\Normalizer\DataUriNormalizer;
use Symfony\Component\Serializer\Normalizer\ObjectNormalizer;
use Symfony\Component\Serializer\Serializer;
use Symfony\Component\HttpFoundation\File\Exception\FileException;
use Symfony\Component\HttpFoundation\File\UploadedFile;
use AppBundle\Service\FileUploader;
use Symfony\Component\HttpFoundation\File\File;
class CourController  extends Controller
{

    public function list2Action()
    {


    }
    public function listAction()
    {
        $cours=$this->getDoctrine()
            ->getRepository(cours::class)->findAll();
        return $this->render('@Cour/cour/listcour.html.twig',array('cours'=>$cours));

    }
    public function ajoutAction(Request $request)
    {
        $cour = new cours();
        $form = $this->createForm(coursType::class, $cour);
        $form->handleRequest($request);
        if ($form->isSubmitted())
        {
              $brochureFile = $form->get('lien')->getData();

                if ($brochureFile) {
                    $originalFilename = pathinfo($brochureFile->getClientOriginalName(), PATHINFO_FILENAME);
                    $safeFilename = $this->generateUniqueFileName();
                    $newFilename = $safeFilename.'-'.uniqid().'.'.$brochureFile->guessExtension();

                    try {
                        $brochureFile->move(
                            $this->getParameter('brochures_directory'),
                            $newFilename

                        );

                    } catch (FileException $e) {
                    }
                    $cour->setLien($newFilename);

                }
            $normalizer = new DataUriNormalizer();//pour converttiseur
            $qrCode = new QrCode($cour->getIdcour()." Nom de chapitre : ".$cour->getNomchapitre()." Telechargeme : ".$cour->getLien());//genirina qr mat3na
            $qrCode->writeFile(__DIR__.'/qrcode.png');//soufrom d'u img pour sauv hatnha fi taswira
            $avatar = $normalizer->normalize(new \SplFileObject(__DIR__.'/qrcode.png'));//3atina
            $time = new \DateTime();
            $cour->setDate($time);
            $cour->setQrcode($avatar);
            $e = $this->getDoctrine()->getManager();
            $e->persist($cour);
            $e->flush();
            
            return $this->redirectToRoute("cour_list");
        }
        return $this->render('@Cour/cour/ajoutcour.html.twig',
            array('form'=>$form->createView()));
    }
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }
    public function modifierAction(Request $request,$id)

    {
        $courr= new  cours();
        $em = $this->getDoctrine()->getManager();
        $cour = $em->getRepository(cours::class)->find($id); //récupération
        $form=$this->createForm(coursType::class,$cour);
        $form->handleRequest($request);

        if($form->isSubmitted()) {
            $em=$this->getDoctrine()->getManager();
            $em->flush();
            return $this->redirectToRoute("cour_list");
        }

        return $this->render('@Cour/cour/modifiercour.html.twig',
            array('cour'=>$cour, 'form'=>$form->createView()));
    }
    public function supprimerAction($id)
    {
        $em = $this->getDoctrine()->getManager();
        $cour= $em->getRepository(cours::class)->find($id);//recuperation de avis a supp
        $serie = $cour->getSeries();
        foreach($serie as $e) {
            $em->remove($e);

        }
        $em->remove($cour);
        $em->flush();//supp
        return $this->redirectToRoute("cour_list");
    }
    public function consulterAction($id)
    {
        $em = $this->getDoctrine()->getManager();
        $cour= $em->getRepository(cours::class)->find($id);//recuperation de avis a supp
        $lien = $cour->getLien();

        return $this->render('@Cour/cour/consulter.html.twig',array('infos'=>$cour,'lien'=>$lien));

    }
    public function affichefrontAction()
    {
        $cours=$this->getDoctrine()
            ->getRepository(cours::class)->findAll();
        return $this->render('@Cour/courfront/listcourfront.html.twig',array('cours'=>$cours));
    }
    public function likeAction(cours $cours)
    {
        $user=$this->getUser();
        $cours->addLikes($user);
        $this->getUser()->addCours($cours);
        $this->getDoctrine()->getManager()->flush();
        return $this->redirectToRoute('cour_listfront');
    }
    public function dislikeAction(cours $cours)
    {

        $user=$this->getUser();
        $cours->removeLikes($user);
        $user->removeCours($cours);
        $this->getDoctrine()->getManager()->flush();
        return $this->redirectToRoute('cour_listfront');
    }
}
