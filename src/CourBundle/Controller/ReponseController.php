<?php

namespace CourBundle\Controller;

use CourBundle\Entity\Reponse;
use CourBundle\Entity\serie;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\HttpFoundation\File\Exception\FileException;
use Symfony\Component\HttpFoundation\Request;

/**
 * Reponse controller.
 *
 */
class ReponseController extends Controller
{
    /**
     * Lists all reponse entities.
     *
     */
    public function indexAction()
    {
        $em = $this->getDoctrine()->getManager();

        $reponses = $em->getRepository('CourBundle:Reponse')->findAll();

        return $this->render('@Cour/reponse/index.html.twig', array(
            'reponses' => $reponses,
        ));
    }

    /**
     * Creates a new reponse entity.
     *
     */
    public function newAction(Request $request, string $id)
    {
        $reponse = new Reponse();
        $serie  =  $this->getDoctrine()->getRepository(serie::class)->find($id);
        $form = $this->createForm('CourBundle\Form\ReponseType', $reponse);
        $form->handleRequest($request);

        if ($form->isSubmitted()) {
            $brochureFile = $form->get('lienrep')->getData();
            if ($brochureFile) {
                $originalFilename = pathinfo($brochureFile->getClientOriginalName(), PATHINFO_FILENAME);
                $safeFilename = $this->generateUniqueFileName();
                $newFilename = $safeFilename . '-' . uniqid() . '.' . $brochureFile->guessExtension();
                try {
                    $brochureFile->move(
                        $this->getParameter('brochures_directory'),
                        $newFilename
                    );
                } catch (FileException $e) {
                }
            }
            $reponse->setLienrep($newFilename);
            $reponse->setUser($this->getUser());
            $reponse->setReponse($serie);
            $serie->removePanier($this->getUser()->getPanier());
            $this->getUser()->getPanier()->removeSerie($serie);
            $em = $this->getDoctrine()->getManager();
            $em->persist($reponse);
            $em->flush();

            return $this->redirectToRoute('afficher_panier');
        }

        return $this->render('@Cour/reponse/new.html.twig', array(
            'reponse' => $reponse,
            'form' => $form->createView(),
        ));
    }
        private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }
    /**
     * Finds and displays a reponse entity.
     *
     */
    public function showAction(Reponse $reponse)
    {
        $deleteForm = $this->createDeleteForm($reponse);

        return $this->render('@Cour/reponse/show.html.twig', array(
            'reponse' => $reponse,
            'delete_form' => $deleteForm->createView(),
        ));
    }

    /**
     * Displays a form to edit an existing reponse entity.
     *
     */
    public function editAction(Request $request, Reponse $reponse)
    {

        $editForm = $this->createForm('CourBundle\Form\ReponseBackType', $reponse);
        $editForm->handleRequest($request);

        if ($editForm->isSubmitted() && $editForm->isValid()) {
            $this->getDoctrine()->getManager()->flush();

            return $this->redirectToRoute('reponse_edit', array('idreponse' => $reponse->getIdreponse()));
        }

        return $this->render('@Cour/reponse/edit.html.twig', array(
            'reponse' => $reponse,
            'edit_form' => $editForm->createView(),
        ));
    }

    /**
     * Deletes a reponse entity.
     *
     */
    public function deleteAction(Request $request, Reponse $reponse)
    {
        $form = $this->createDeleteForm($reponse);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            $em = $this->getDoctrine()->getManager();
            $em->remove($reponse);
            $em->flush();
        }

        return $this->redirectToRoute('reponse_index');
    }

    /**
     * Creates a form to delete a reponse entity.
     *
     * @param Reponse $reponse The reponse entity
     *
     * @return \Symfony\Component\Form\Form The form
     */
    private function createDeleteForm(Reponse $reponse)
    {
        return $this->createFormBuilder()
            ->setAction($this->generateUrl('reponse_delete', array('idreponse' => $reponse->getIdreponse())))
            ->setMethod('DELETE')
            ->getForm()
        ;
    }
    public function affichebackreponseAction()
    {
        $reponse=$this->getDoctrine()
            ->getRepository(Reponse::class)->findAll();

        return $this->render('@Cour/reponse/reponseback.html.twig',array('reponse'=>$reponse));
    }
}
